# NOTE: this file is parsed as a golang template.
---
apiVersion: extensions/v1beta1
kind: Deployment

metadata:
  name: {{.app}}-{{.env}}

spec:
  replicas: {{.replicas}}

  template:
    metadata:
      labels:
        app: {{.app}}
        env: {{.env}}

    spec:
      containers:
        - name: esp
          image: gcr.io/nyt-bsre-prd/dv-cloud-endpoints
          args: [
            "-p", "{{.ce_esp_port}}",
            "-a", "127.0.0.1:{{.port}}",
            "-s", "{{.ce_service_name}}",
            "-v", "{{.ce_service_version}}",
          ]
          env:
            - name: CE_INGRESS_NAME
              value: "{{.app}}-{{.env}}"
            - name: CE_ALLOW_OFFICE
              value: "true"
          ports:
            - containerPort: {{.ce_esp_port}}
          livenessProbe:
            httpGet:
              path: /healthz
              port: {{.ce_esp_port}}
            periodSeconds: 10
            initialDelaySeconds: 10
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: /healthz
              port: {{.ce_esp_port}}
            periodSeconds: 10
            initialDelaySeconds: 10
            timeoutSeconds: 5

        - name: application
          image: {{.image}}
          ports:
            - containerPort: {{.port}}
          # Quote all environment variable values
          env:
            - name: PROJECT_ID
              value: "{{.project_id}}"
            - name: ENABLE_STACKDRIVER
              value: "true"
            - name: SERVER_HTTP_PORT
              value: "8000"
            - name: SERVER_GIZMO_HEALTH_CHECK_PATH
              value: "/healthz"
            - name: THREE_PLAY_API_KEY
              valueFrom:
                secretKeyRef:
                  name: captions-api-secrets
                  key: three-play-api-key
            - name: THREE_PLAY_API_SECRET
              valueFrom:
                secretKeyRef:
                  name: captions-api-secrets
                  key: three-play-api-secret

          # Please see probe documentation for details:
          # https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
          # Available probe types are httpGet, tcpSocket, and exec
          #
          # readinessProbe success tells Kubernetes to send traffic to this container
          # All containers in a pod must pass the readinessProbe for the pod to receive traffic
          # Required for Ingress
          readinessProbe:
            # Success on 200 response
            httpGet:
              path: /healthz
              port: {{.port}}
            initialDelaySeconds: 1
            periodSeconds: 10
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
          # livenessProbe failure alerts Kubernetes to restart this container
          livenessProbe:
            # Success on socket connection to port
            tcpSocket:
              port: {{.port}}
            initialDelaySeconds: 1
            periodSeconds: 10
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
---
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler

metadata:
  name: {{.app}}-{{.env}}

spec:
  scaleTargetRef:
    kind: Deployment
    name: {{.app}}-{{.env}}
  minReplicas: {{.replicas_min}}
  maxReplicas: {{.replicas_max}}
  targetCPUUtilizationPercentage: {{.cpu}}
---
apiVersion: v1
kind: Service

metadata:
  name: {{.app}}-{{.env}}

spec:
  type: NodePort
  selector:
    app: {{.app}}
    env: {{.env}}
  ports:
    - name: http
      port: 80
      targetPort: {{.ce_esp_port}}
      protocol: TCP
---
apiVersion: extensions/v1beta1
kind: Ingress

metadata:
  name: {{.app}}-{{.env}}
  # Please see https documentation for details:
  # https://github.com/nytm/dv-gcp-guide/blob/master/topics/https.md
  annotations:
    # Disable port 80 access (set at initial creation; otherwise no effect)
    kubernetes.io/ingress.allow-http: "true"
    # Name of the static global IP address in GCP
    kubernetes.io/ingress.global-static-ip-name: "{{.ip_name}}"
    # Name of the TLS certificate in GCP
    ingress.gcp.kubernetes.io/pre-shared-cert: "{{.cert_name}}"

spec:
  backend:
    serviceName: {{.app}}-{{.env}}
    servicePort: 80
